@rendermode InteractiveServer
@using BlazorGame.Data
@using BlazorGame.Models.Entities
@using BlazorGame.Utils
@using Microsoft.AspNetCore.Components.Authorization
@inject ICookie Cookie
@inject AppDbContext AppDbContext
@inject NavigationManager NavigationManager

<div class="bounding-box">
    <div class="score-bar">
        <span class="score">Score: @_snake.Score</span>
        <span class="best-score">Best score: @_snake.BestScore</span>
    </div>
    <div class="snake-container"
         tabindex="0"
         @onkeydown="_snake.ControlSnakeDirection">

        @if (_snake.IsGameOver)
        {
            <div class="overlay-box" @onclick="StartGame">
                Play
            </div>
        }

        @for (int row = 0; row < Snake.NoOfRows; row++)
        {
            <div class="row">
                @for (int col = 0; col < Snake.NoOfCols; col++)
                {
                    <div class="cell @(_snake.GetCellClass(row, col))"></div>
                }
            </div>
        }
    </div>
</div>

@code {

    private Snake _snake = new();

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask {get; set;}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int.TryParse(await Cookie.GetValue("BestScore"), out _snake.BestScore);

            var authState = await AuthenticationStateTask;
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                User dbUser = AppDbContext.Users.SingleOrDefault(x => x.Username == user.Identity.Name)!;
                int userBestScore = dbUser.BestScore;
                if (userBestScore > _snake.BestScore)
                {
                    _snake.BestScore = userBestScore;
                    await Cookie.SetValue("BestScore", $"{userBestScore}");
                }
                if (userBestScore < _snake.BestScore)
                {
                    dbUser.BestScore = _snake.BestScore;
                    await AppDbContext.SaveChangesAsync();
                }
            }
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task StartGame()
    {
        await _snake.StartGame(StateHasChanged);
        await Cookie.SetValue("BestScore", $"{_snake.BestScore}");
    }

    private class Snake
    {
        public const int NoOfRows = 15;
        public const int NoOfCols = 15;
        const int Speed = 300;

        public int Score = 0;
        public int BestScore = 0;
        public bool IsGameOver = true;

        private SnakeCell _currentCell = null!;
        private readonly List<SnakeCell> _snakeBody = [];

        private Direction _snakeDirection = Direction.Right;

        private int _foodRow = -1;
        private int _foodCol = -1;

        private enum Direction
        {
            Up = 0,
            Right = 1,
            Down = 2,
            Left = 3
        }

        public class SnakeCell
        {
            public int Row { get; set; }

            public int Col { get; set; }
        }

        private void InitializeGame()
        {
            IsGameOver = false;

            _currentCell = new SnakeCell { Row = 10, Col = 10 };

            _snakeBody.Clear();
            Score = 1;
            _snakeBody.Add(CloneSnakeCell());

            GenerateFood();
        }

        public async Task StartGame(Action stateHasChanged)
        {
            // Reset game state
            InitializeGame();

            // Start the game loop
            while (!IsGameOver)
            {
                UpdateSnakeDirection();
                if (IsFoodFound())
                {
                    Score++;
                    GenerateFood();
                }

                await Task.Delay(Speed);
                stateHasChanged();
            }
        }

        public void ControlSnakeDirection(KeyboardEventArgs e)
        {
            _snakeDirection = e.Key switch
            {
                "ArrowUp" => Direction.Up,
                "ArrowRight" => Direction.Right,
                "ArrowDown" => Direction.Down,
                "ArrowLeft" => Direction.Left,
                _ => _snakeDirection
            };
        }

        private void UpdateSnakeDirection()
        {
            switch (_snakeDirection)
            {
                case Direction.Up:
                    _currentCell.Row--;
                    break;
                case Direction.Right:
                    _currentCell.Col++;
                    break;
                case Direction.Down:
                    _currentCell.Row++;
                    break;
                case Direction.Left:
                    _currentCell.Col--;
                    break;
            }

            // Add the new current Cell to the  of the snake's body
            _snakeBody.Insert(0, CloneSnakeCell());

            // Remove the last cell (tail) to maintain the snake's size
            if (_snakeBody.Count > Score)
            {
                _snakeBody.RemoveAt(_snakeBody.Count - 1);
            }

            //Check if Game is over
            CheckIfGameOver();
        }

        private bool CheckOutOfBounds()
        {
            return _currentCell.Row < 0 ||
                   _currentCell.Row >= NoOfRows ||
                   _currentCell.Col < 0 ||
                   _currentCell.Col >= NoOfCols;
        }

        private bool CheckTailBitten()
        {
            for (int i = 1; i < _snakeBody.Count; i++)
            {
                SnakeCell cell = _snakeBody[i];

                if (_currentCell.Row == cell.Row && _currentCell.Col == cell.Col)
                {
                    return true;
                }
            }
            return false;
        }

        private void CheckIfGameOver()
        {
            if (CheckOutOfBounds() || CheckTailBitten())
            {
                IsGameOver = true;
                if (Score > BestScore)
                {
                    BestScore = Score;
                }
            }
        }

        private void GenerateFood()
        {
            var random = new Random();
            _foodRow = random.Next(0, NoOfRows);
            _foodCol = random.Next(0, NoOfCols);
        }

        private SnakeCell CloneSnakeCell()
        {
            return new SnakeCell { Row = _currentCell.Row, Col = _currentCell.Col };
        }

        private bool IsFoodFound()
        {
            return _currentCell.Row == _foodRow && _currentCell.Col == _foodCol;
        }

        private bool IsSnakeCell(int row, int col)
        {
            return _snakeBody.Exists(cell => cell.Row == row && cell.Col == col);
        }

        private bool IsFoodCell(int row, int col)
        {
            return row == _foodRow && col == _foodCol;
        }

        private bool IsSnakeHead(int row, int col)
        {
            return row == _snakeBody.FirstOrDefault()?.Row && col == _snakeBody.FirstOrDefault()?.Col;
        }

        public string GetCellClass(int row, int col)
        {
            if (IsFoodCell(row, col)) return "food";
            if (IsSnakeHead(row, col)) return "snake-head";
            if (IsSnakeCell(row, col)) return "snake-body";
            return "";
        }
    }
}