@rendermode InteractiveServer
@using BlazorGame.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbFactory

<div class="bounding-box">
    <h3 class="leaderboard-title">Leaderboard</h3>
    <table class="leaderboard">
        <tr class="header-row">
            <th class="header-cell">#</th>
            <th class="header-cell">Username</th>
            <th class="header-cell">Score</th>
        </tr>
        @for (var i = 1; i <= _scores.Count; i++)
        {
            var user = _scores[i-1];
            <tr class="leaderboard-row">
                <td class="leaderboard-cell">@i</td>
                <td class="leaderboard-cell">@user.Username</td>
                <td class="leaderboard-cell">@user.Score</td>
            </tr>
        }
    </table>
</div>

@code {

    private class User(string username, int score)
    {
        public string Username = username;
        public int Score = score;
    }

    private Timer? _timer;
    const int NumberOfElements = 25;
    const int Period = 60000;
    private List<User> _scores = [];

    protected override void OnInitialized()
    {
        _timer = new Timer(_ =>
        {
            Task.Run(UpdateLeaderboard);
        }, null, 0, Period);

        base.OnInitialized();
    }

    private async Task UpdateLeaderboard()
    {
        var appDbContext = await DbFactory.CreateDbContextAsync();
        _scores = await appDbContext.Users
            .OrderByDescending(user => user.BestScore)
            .Take(NumberOfElements)
            .Select(user => new User(user.Username, user.BestScore))
            .ToListAsync();
        await InvokeAsync(StateHasChanged);
    }

}