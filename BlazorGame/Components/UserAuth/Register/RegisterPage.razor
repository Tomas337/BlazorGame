@page "/register"
@using System.Security.Claims
@using BlazorGame.Data
@using BlazorGame.Models.Entities
@using BlazorGame.Models.ViewModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IHttpContextAccessor HttpContextAccessor
@inject AppDbContext appDbContext
@inject NavigationManager navigationManager

<div class="w-25 h-100 mx-auto d-flex justify-content-center align-items-center">
    <EditForm class="form" Model="@Model" OnValidSubmit="@Register" FormName="RegisterForm">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>User name</label>
            <InputText class="form-control" placeholder="Username" @bind-Value=@Model.Username/>
            <ValidationMessage For="() => Model.Username"/>
        </div>
        <div class="mb-3">
            <label>Password</label>
            <InputText type="password" class="form-control" placeholder="Password" @bind-Value=@Model.Password/>
            <ValidationMessage For="() => Model.Password"/>
        </div>
        <div class="mb-3 text-center">
            <span class="text-danger">@errorMessage</span>
        </div>
        <div class="mb-2 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
        <div class="mb-3 text-center">
            <span>Already have an account? <a href="/">Go back</a></span>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public RegisterViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Register()
    {
        var userAccount = appDbContext.Users.FirstOrDefault(x => x.Username == Model.Username);
        if (userAccount is not null)
        {
            errorMessage = "User name already exists";
            return;
        }

        appDbContext.Users.Add(new User(Model.Username, Model.Password));
        appDbContext.SaveChanges();

        var claims = new List<Claim>
        {
            new(ClaimTypes.Name, Model.Username),
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext is not null)
        {
            await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
        }
        else
        {
            errorMessage = "Authentication failed. HttpContext is unavailable.";
            return;
        }

        navigationManager.NavigateTo("/");
    }

}